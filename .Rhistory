#If entry is one of the ends of the rows, make new row, else do nothing.
if (r %in% e) {
cat(tr_e,space)
} else {}
}
cat(t_e,space,space)
}
library(readxl)
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
#Vectors for HTML and Looping
categories<-levels(as.factor(p$Category))
space<-c("\n","\n")
a_link<-"<a href="
a<-"</a>"
t_s<-"<table>"
tr_s<-"<tr>"
td_s<-"<td>"
td_e<-"</td>"
tr_e<-"</tr>"
t_e<-"</table>"
categories
c<-categories[6]
c
#Category Subset
psub<-subset(p,Category==c)
#Vector for which picture to start new rows in output
s<-seq(1,length(psub$Category),by=3)
e<-seq(3,length(psub$Category),by=3)
#Printing Category Title
cat("#"," **", c, "** ",space,t_s,space,sep="")
#Looping Through Each Entry Row
for (r in 1:nrow(psub)){
#Entry Subset
e<-psub[r,]
#If entry is one of the desired new rows, make new row, else just a new column.
if (r %in% s) {
cat(tr_s,space,td_s)
} else {
cat(td_s)
}
#Subset Vectors
desc<-paste("<i>",e$Title,"</i>")
photo<-paste("https://zacharymilosmoore.github.io/mooremanordesigns/portfolio_photos/",e$Filename,".jpg",sep="")
thumb<-paste("https://zacharymilosmoore.github.io/mooremanordesigns/portfolio_thumb/",e$Filename,".jpg",sep="")
image<-paste("<img class='center-cropped' src=",thumb,">")
link<-paste(a_link,photo,">",sep="")
#Print Photo in col/row and end section
cat(link,image,a,space,desc,td_e)
#If entry is one of the ends of the rows, make new row, else do nothing.
if (r %in% e) {
cat(tr_e,space)
} else {}
}
psub
View(psub)
#Vector for which picture to start new rows in output
s<-seq(1,length(psub$Category),by=3)
e<-seq(3,length(psub$Category),by=3)
s
e
r<-20
#Entry Subset
e<-psub[r,]
e
#If entry is one of the desired new rows, make new row, else just a new column.
if (r %in% s) {
cat(tr_s,space,td_s)
} else {
cat(td_s)
}
#Subset Vectors
desc<-paste("<i>",e$Title,"</i>")
photo<-paste("https://zacharymilosmoore.github.io/mooremanordesigns/portfolio_photos/",e$Filename,".jpg",sep="")
thumb<-paste("https://zacharymilosmoore.github.io/mooremanordesigns/portfolio_thumb/",e$Filename,".jpg",sep="")
image<-paste("<img class='center-cropped' src=",thumb,">")
link<-paste(a_link,photo,">",sep="")
image
link
#Print Photo in col/row and end section
cat(link,image,a,space,desc,td_e)
#If entry is one of the ends of the rows, make new row, else do nothing.
if (r %in% e) {
cat(tr_e,space)
} else {}
r %in% e
r
e
library(readxl)
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
#Vectors for HTML and Looping
categories<-levels(as.factor(p$Category))
space<-c("\n","\n")
a_link<-"<a href="
a<-"</a>"
t_s<-"<table>"
tr_s<-"<tr>"
td_s<-"<td>"
td_e<-"</td>"
tr_e<-"</tr>"
t_e<-"</table>"
#Looping Through Each Category
for (c in categories){
#Category Subset
psub<-subset(p,Category==c)
#Vector for which picture to start new rows in output
st<-seq(1,length(psub$Category),by=3)
en<-seq(3,length(psub$Category),by=3)
#Printing Category Title
cat("#"," **", c, "** ",space,t_s,space,sep="")
#Looping Through Each Entry Row
for (r in 1:nrow(psub)){
#Entry Subset
e<-psub[r,]
#If entry is one of the desired new rows, make new row, else just a new column.
if (r %in% st) {
cat(tr_s,space,td_s)
} else {
cat(td_s)
}
#Subset Vectors
desc<-paste("<i>",e$Title,"</i>")
photo<-paste("https://zacharymilosmoore.github.io/mooremanordesigns/portfolio_photos/",e$Filename,".jpg",sep="")
thumb<-paste("https://zacharymilosmoore.github.io/mooremanordesigns/portfolio_thumb/",e$Filename,".jpg",sep="")
image<-paste("<img class='center-cropped' src=",thumb,">")
link<-paste(a_link,photo,">",sep="")
#Print Photo in col/row and end section
cat(link,image,a,space,desc,td_e)
#If entry is one of the ends of the rows, make new row, else do nothing.
if (r %in% en) {
cat(tr_e,space)
} else {}
}
cat(t_e,space,space)
}
#Code to Resize Images from Larger jpegs to Thumbnails
#Admin####
library(readxl)
library(imager)
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
input<-"portfolio_org/"
output<-"portfolio_thumb/"
output2<-"portfolio_photos/"
#Loop Through Images
for(i in images){
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
im<-load.image(input_name)
w<-width(im)
h<-height(im)
s<- if(h<1000) {1} else {10}
thmb<-resize(im,round(w/s),round(h/s))
alt<-resize(im,round(0.99*w),round(0.99*h))
save.image(thmb,output_name)
save.image(alt,output2_name)
}
#Code to Resize Images from Larger jpegs to Thumbnails
#Admin####
library(readxl)
library(imager)
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
input<-"portfolio_org/"
output<-"portfolio_thumb/"
output2<-"portfolio_photos/"
#Loop Through Images
for(i in images){
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
im<-load.image(input_name)
w<-width(im)
h<-height(im)
s<- if(h<1000) {1} else {10}
thmb<-resize(im,round(w/s),round(h/s))
alt<-resize(im,round(0.99*w),round(0.99*h))
save.image(thmb,output_name)
save.image(alt,output2_name)
}
#Code to Resize Images from Larger jpegs to Thumbnails
#Admin####
library(readxl)
library(imager)
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
input<-"portfolio_org/"
output<-"portfolio_thumb/"
output2<-"portfolio_photos/"
#Loop Through Images
for(i in images){
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
im<-load.image(input_name)
w<-width(im)
h<-height(im)
s<- if(h<1000) {1} else {10}
thmb<-resize(im,round(w/s),round(h/s))
alt<-resize(im,round(0.99*w),round(0.99*h))
save.image(thmb,output_name)
save.image(alt,output2_name)
}
which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)
#Only updating those without existing thumbnails to save time
images<-images[-which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[-which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
input<-"portfolio_org/"
output<-"portfolio_thumb/"
output2<-"portfolio_photos/"
for(i in images){
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
im<-load.image(input_name)
w<-width(im)
h<-height(im)
s<- if(h<1000) {1} else {10}
thmb<-resize(im,round(w/s),round(h/s))
alt<-resize(im,round(0.99*w),round(0.99*h))
save.image(thmb,output_name)
save.image(alt,output2_name)
}
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[-which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
#Admin####
library(readxl)
library(imager)
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[-which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
images
which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
View(p)
p<-subset(p,Include=="Yes")
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[-which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
images
input<-"portfolio_org/"
output<-"portfolio_thumb/"
output2<-"portfolio_photos/"
for(i in images){
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
im<-load.image(input_name)
w<-width(im)
h<-height(im)
s<- if(h<1000) {1} else {10}
thmb<-resize(im,round(w/s),round(h/s))
alt<-resize(im,round(0.99*w),round(0.99*h))
save.image(thmb,output_name)
save.image(alt,output2_name)
}
i
images<-as.vector(interaction(levels(as.factor(p$Filename)),"jpg"))
#Only updating those without existing thumbnails to save time
images<-images[-which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
images
input<-"portfolio_org/"
output<-"portfolio_thumb/"
output2<-"portfolio_photos/"
for(i in images){
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
im<-load.image(input_name)
w<-width(im)
h<-height(im)
s<- if(h<1000) {1} else {10}
thmb<-resize(im,round(w/s),round(h/s))
alt<-resize(im,round(0.99*w),round(0.99*h))
save.image(thmb,output_name)
save.image(alt,output2_name)
}
install.packages("icons")
library(icons)
install.packages(icons)
install.packages("icons")
install.packages("icons")
library(readxl)
library(imager)
library(magick)
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
p$Filename<-interaction(p$Filename,"jpg")
images<-as.vector(levels(as.factor(p$Filename)))
#Vectors & Data####
p<-read_excel("portfolio.xlsx",sheet="portfolio")
p<-subset(p,Include=="Yes")
p$Filename<-interaction(p$Filename,"jpg")
images<-as.vector(levels(as.factor(p$Filename)))
#Only updating those without existing thumbnails to save time
#images<-images[-which(file.exists(paste("portfolio_thumb/",images,sep=""))==T)]
images
for(i in images[133:length(images)]){
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
info<-p[which(p$Filename==i),]
#Read image
im<-image_read(input_name)
#Thumbnail
thmb<-image_resize(im, geometry = "x500")
if(info$Status.Sale %in% c("FOR SALE","ASK FOR PRICING")) {
text<-""
} else {
text<-info$Status.Sale
}
thmb<-image_annotate(
thmb,
text = text,
size = 45,
color = "white",
degrees = 45,
gravity = "Center",
font = "Times"
)
#Pop-up
alt<-image_resize(im, geometry = "x2000")
alt<-image_border(alt, color = "black", geometry = "50x50")
if(info$Status.Sale == "FOR SALE") {
price<-paste("$",info$Price.Size,sep="")
} else {
price<-info$Status.Sale
}
alt<-image_annotate(
alt,
text = paste(
info$Title,
info$Year,
info$Dimensions,
price,
sep=" - "),
color = "white",
size = 45,
gravity = "SouthEast",
font = "Times"
)
#Save to File
image_write(thmb, path = output_name, format = "jpg", quality = 100)
image_write(alt, path = output2_name, format = "jpg", quality = 100)
}
View(p)
i<-images[52]
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
info<-p[which(p$Filename==i),]
#Read image
im<-image_read(input_name)
#Thumbnail
thmb<-image_resize(im, geometry = "x500")
if(info$Status.Sale %in% c("FOR SALE","ASK FOR PRICING")) {
text<-""
} else {
text<-info$Status.Sale
}
thmb<-image_annotate(
thmb,
text = text,
size = 45,
color = "white",
degrees = 45,
gravity = "Center",
font = "Times"
)
#Pop-up
alt<-image_resize(im, geometry = "x2000")
alt<-image_border(alt, color = "black", geometry = "50x50")
if(info$Status.Sale == "FOR SALE") {
price<-paste("$",info$Price.Size,sep="")
} else {
price<-info$Status.Sale
}
alt<-image_annotate(
alt,
text = paste(
info$Title,
info$Year,
info$Dimensions,
price,
sep=" - "),
color = "white",
size = 45,
gravity = "SouthEast",
font = "Times"
)
#Save to File
image_write(thmb, path = output_name, format = "jpg", quality = 100)
image_write(alt, path = output2_name, format = "jpg", quality = 100)
i<-images[86]
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
info<-p[which(p$Filename==i),]
#Read image
im<-image_read(input_name)
#Thumbnail
thmb<-image_resize(im, geometry = "x500")
if(info$Status.Sale %in% c("FOR SALE","ASK FOR PRICING")) {
text<-""
} else {
text<-info$Status.Sale
}
thmb<-image_annotate(
thmb,
text = text,
size = 45,
color = "white",
degrees = 45,
gravity = "Center",
font = "Times"
)
#Pop-up
alt<-image_resize(im, geometry = "x2000")
alt<-image_border(alt, color = "black", geometry = "50x50")
if(info$Status.Sale == "FOR SALE") {
price<-paste("$",info$Price.Size,sep="")
} else {
price<-info$Status.Sale
}
alt<-image_annotate(
alt,
text = paste(
info$Title,
info$Year,
info$Dimensions,
price,
sep=" - "),
color = "white",
size = 45,
gravity = "SouthEast",
font = "Times"
)
#Save to File
image_write(thmb, path = output_name, format = "jpg", quality = 100)
image_write(alt, path = output2_name, format = "jpg", quality = 100)
i<-images[132]
input_name<-paste(input,i,sep="")
output_name<-paste(output,i,sep="")
output2_name<-paste(output2,i,sep="")
info<-p[which(p$Filename==i),]
#Read image
im<-image_read(input_name)
#Thumbnail
thmb<-image_resize(im, geometry = "x500")
if(info$Status.Sale %in% c("FOR SALE","ASK FOR PRICING")) {
text<-""
} else {
text<-info$Status.Sale
}
thmb<-image_annotate(
thmb,
text = text,
size = 45,
color = "white",
degrees = 45,
gravity = "Center",
font = "Times"
)
#Pop-up
alt<-image_resize(im, geometry = "x2000")
alt<-image_border(alt, color = "black", geometry = "50x50")
if(info$Status.Sale == "FOR SALE") {
price<-paste("$",info$Price.Size,sep="")
} else {
price<-info$Status.Sale
}
alt<-image_annotate(
alt,
text = paste(
info$Title,
info$Year,
info$Dimensions,
price,
sep=" - "),
color = "white",
size = 45,
gravity = "SouthEast",
font = "Times"
)
#Save to File
image_write(thmb, path = output_name, format = "jpg", quality = 100)
image_write(alt, path = output2_name, format = "jpg", quality = 100)
